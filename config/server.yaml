toolDefinitions:
  fromPythonFunction:
    - name: get_joke
      module: py_conf_mcp.tools.example.joke
      key: get_joke
      description: |-
        Fetches a random programming joke.

  fromPythonClass:
    - name: how_to_use_this_tool
      description: |-
        Explain to the user how to use this AI tool.
        This also summarised what this tool knows.
        Also provides some example prompts.
      module: py_conf_mcp.tools.sources.static
      className: StaticContentTool
      initParameters:
        content: |-
          You can ask for jokes..

          Example prompts:
            - Tell me a joke.

    - name: get_programming_joke_via_web_api
      description: |-
        Fetches a random joke.
      module: py_conf_mcp.tools.sources.web_api
      className: WebApiTool
      initParameters:
        url: 'https://v2.jokeapi.dev/joke/Programming?type=single&safe-mode&blacklistFlags=nsfw'

    - name: get_joke_via_web_api
      description: |-
        Fetches a random joke.
      module: py_conf_mcp.tools.sources.web_api
      className: WebApiTool
      initParameters:
        url: 'https://v2.jokeapi.dev/joke/{{ category }}?type={{ type }}&safe-mode&blacklistFlags=nsfw'
      inputs:
        category:
          type: str
          default: 'Programming'
          # Note: 'Spooky' and 'Christmas' are not available in the API as single joke types
          enum:
            - Any
            - Programming
            - Misc
            - Dark
            - Pun
            - Spooky
            - Christmas
        type:
          type: str
          default: 'single'
          title: Joke Type
          enum:
            - single
            - twopart

    - name: search_ecr
      description: |-
        Searches for Early Career Researchers (ECR)
      module: py_conf_mcp.tools.sources.web_api
      className: WebApiTool
      initParameters:
        url: 'https://localhost:9200/dev_ecr_v1/_search'
        verify_ssl: false
        basic_auth:
          username: '{{ read_secret_from_env("OPENSEARCH_USERNAME_FILE_PATH") }}'
          password: '{{ read_secret_from_env("OPENSEARCH_PASSWORD_FILE_PATH") }}'
        json_template: |-
          {
            "query": {
              "bool": {
                "must": [
                  {
                    "multi_match": {
                      "query": {{ query | tojson }},
                      "fields": [
                        "name^3",
                        "subject_areas^2",
                        "keywords"
                      ],
                      "type": "most_fields",
                      "fuzziness": "AUTO",
                      "operator": "or",
                      "minimum_should_match": 1
                    }
                  }
                ]
              }
            },
            "size": 10
          }
        response_template: |-
          {%- if response_json.hits.total.value > 0 -%}
            {%- if response_json.hits.total.value == 1 -%}
          1 ECR found:
            {%- else -%}
          {{ response_json.hits.total.value }} ECRs found:
            {%- endif -%}
          {%- else -%}
            No ECRs found.
          {%- endif %}
          {%- if response_json.hits.total.value > 0 %}
          {%- for hit in response_json.hits.hits %}
          - {{ hit._source.name }}
            Institution: {{ hit._source.institution }}
            Subject areas: {{ hit._source.subject_areas }}
            Keywords: {{ hit._source.keywords }}
          {%- endfor %}
          {%- endif %}
      inputs:
        query:
          type: str
          title: Search Query

    - name: get_senior_editors
      description: |-
        Retrieves a list of senior editors along with their expertise.
        Returns JSON.
      module: py_conf_mcp.tools.sources.bigquery
      className: BigQueryTool
      initParameters:
        project_name: elife-data-pipeline
        output_format: csv
        sql_query: |-
          SELECT
            Name,
            Keywords,
            Techniques,
            Subject_Areas,
            Research_Interests,
            Website_URL,
            Current_Availability,
            Role_Name
          FROM `elife-data-pipeline.prod.mv_Editorial_Public_Editor_Profile`
          WHERE Role_Name = 'Senior Editor'

server:
  name: 'Test MCP server'
  tools:
    - get_joke
    - how_to_use_this_tool
    - get_programming_joke_via_web_api
    - get_joke_via_web_api
    - search_ecr
    - get_senior_editors
